var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = EarthSciMLBase","category":"page"},{"location":"#EarthSciMLBase","page":"Home","title":"EarthSciMLBase","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for EarthSciMLBase.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package contains utilities for constructing Earth Science models in Julia using ModelingToolkit.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [EarthSciMLBase]","category":"page"},{"location":"#EarthSciMLBase.ICBC","page":"Home","title":"EarthSciMLBase.ICBC","text":"ICBC(icbc::ICBCcomponent...)\n\nInitial and boundary conditions for a ModelingToolkit.jl PDESystem.  It can be used with the + operator to add initial and boundary conditions to a ModelingToolkit.jl ODESystem or Catalyst.jl ReactionSystem.\n\nicbc: The sets of initial and/or boundary conditions.\n\nExample:\n\nusing EarthSciMLBase\nusing ModelingToolkit, DomainSets\n\n# Set up ODE system\n@parameters x y t\n@variables u(t) v(t)\nDt = Differential(t)\n\nx_min = y_min = t_min = 0.0\nx_max = y_max = 1.0\nt_max = 11.5\n\neqs = [\n    Dt(u) ~ √abs(v),\n    Dt(v) ~ √abs(u),\n]\n\n@named sys = ODESystem(eqs)\n\n# Create constant initial and boundary conditions = 16.0.\nicbc = ICBC(\n    constBC(16.0, \n        x ∈ Interval(x_min, x_max),\n        y ∈ Interval(y_min, y_max),\n    ),\n    constIC(4.0, t ∈ Interval(t_min, t_max)),\n)\n\n# Convert to PDESystem and add constant initial and boundary conditions.\npdesys = sys + icbc\n\npdesys.bcs\n\n# output\n10-element Vector{Equation}:\n u(0.0, y, t) ~ 16.0\n u(1.0, y, t) ~ 16.0\n u(x, 0.0, t) ~ 16.0\n u(x, 1.0, t) ~ 16.0\n v(0.0, y, t) ~ 16.0\n v(1.0, y, t) ~ 16.0\n v(x, 0.0, t) ~ 16.0\n v(x, 1.0, t) ~ 16.0\n u(x, y, 0.0) ~ 4.0\n v(x, y, 0.0) ~ 4.0\n\n\n\n\n\n","category":"type"},{"location":"#EarthSciMLBase.ICBCcomponent","page":"Home","title":"EarthSciMLBase.ICBCcomponent","text":"Initial and boundary condition components that can be combined to  create an ICBC object.\n\n\n\n\n\n","category":"type"},{"location":"#EarthSciMLBase.constBC","page":"Home","title":"EarthSciMLBase.constBC","text":"Construct constant boundary conditions equal to the value  specified by val.\n\nval: The value of the constant boundary conditions.\npartialdomains: The partial domains, e.g. [x ∈ Interval(x_min, x_max), y ∈ Interval(y_min, y_max)].\n\n\n\n\n\n","category":"type"},{"location":"#EarthSciMLBase.constIC","page":"Home","title":"EarthSciMLBase.constIC","text":"Construct constant initial conditions equal to the value  specified by val.\n\nval: The value of the constant initial conditions.\nindepdomain: The independent domain, e.g. t ∈ Interval(t_min, t_max).\n\n\n\n\n\n","category":"type"},{"location":"#EarthSciMLBase.periodicBC","page":"Home","title":"EarthSciMLBase.periodicBC","text":"Construct periodic boundary conditions for the given partialdomains. Periodic boundary conditions are defined as when the value at one side of the domain is set equal to the value at the other side, so  that the domain \"wraps around\" from one side to the other.\n\npartialdomains: The partial domains, e.g. [x ∈ Interval(x_min, x_max), y ∈ Interval(y_min, y_max)].\n\n\n\n\n\n","category":"type"},{"location":"#EarthSciMLBase.zerogradBC","page":"Home","title":"EarthSciMLBase.zerogradBC","text":"Construct zero-gradient boundary conditions for the given partialdomains.\n\npartialdomains: The partial domains, e.g. [x ∈ Interval(x_min, x_max), y ∈ Interval(y_min, y_max)].\n\n\n\n\n\n","category":"type"},{"location":"#Base.:+-Tuple{Symbolics.Equation, Symbolics.Equation}","page":"Home","title":"Base.:+","text":"    a::Symbolics.Equation + b::Symbolics.Equation\n\nAdd two equations. If the left-hand-sides of the two equations are  the same, a single equation is returned with the two right-hand-sides added together. If the left-hand-sides of the two equations are different, a vector of the two equations is returned.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:+-Tuple{Vector{Symbolics.Equation}, Vector{Symbolics.Equation}}","page":"Home","title":"Base.:+","text":"    a::Vector{Symbolics.Equation} + b::Vector{Symbolics.Equation}\n\nAdd two vectors of equations using the same rules as when adding two individual equations.\n\n\n\n\n\n","category":"method"},{"location":"#EarthSciMLBase.add_dims-Tuple{Any, AbstractVector, AbstractVector}","page":"Home","title":"EarthSciMLBase.add_dims","text":"add_dims(expression, vars, dims)\nadd_dims(equation, vars, dims)\n\nAdd the given dimensions to each variable in vars in the given expression or equation.  Each variable in vars must be unidimensional, i.e. defined like @variables u(t) rather than @variables u(..).\n\nExample:\n\nusing EarthSciMLBase, ModelingToolkit\n\n@parameters x y k t\n@variables u(t) q(t)\nexp = 2u + 3k*q + 1\nEarthSciMLBase.add_dims(exp, [u, q], [x, y, t])\n\n# output\n1 + 2u(x, y, t) + 3k*q(x, y, t)\n\n\n\n\n\n","category":"method"},{"location":"#EarthSciMLBase.dims-Tuple{EarthSciMLBase.ICcomponent}","page":"Home","title":"EarthSciMLBase.dims","text":"dims(icbc)\n\ndefined at /home/runner/work/EarthSciMLBase.jl/EarthSciMLBase.jl/src/icbc.jl:249.\n\nReturns the dimensions of the independent and partial domains associated with these  initial or boundary conditions.\n\n\n\n\n\n","category":"method"},{"location":"#EarthSciMLBase.domains-Tuple{EarthSciMLBase.ICcomponent}","page":"Home","title":"EarthSciMLBase.domains","text":"domains(icbc)\n\ndefined at /home/runner/work/EarthSciMLBase.jl/EarthSciMLBase.jl/src/icbc.jl:258.\n\nReturns the domains associated with these initial or boundary conditions.\n\n\n\n\n\n","category":"method"}]
}
